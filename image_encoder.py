import numpy as np
import types

def message_to_bin(message):
    if type(message) == str:
        return ''.join([format(ord(i), "08b") for i in message])
    elif type(message) == bytes or type(message) == np.ndarray:
        return [ format(i, "08b") for i in message]
    elif type(message) == int or type(message) == np.uint8:
        return format(message, "08b")
    else:
        raise TypeError("input not supported.")


#params: image, message. Hide the input message in the input image
def hide_data(image, message):
    n_bytes = image.shape[0] * image.shape[1] * 3 // 8

    if len(message) > n_bytes:
        print("error: need larger image or smaller message. Too many bytes to write")
        return 0
    
    message += "#####"

    data_index = 0

    binary_message = message_to_bin
    message_len = len(binary_message)

    for values in image:
        for pixel in values:
            r, g, b = message_to_bin(pixel)

        if data_index < message_len:
            pixel[0] = int(r[:-1] + binary_message[data_index], 2)
            data_index += 1
        if data_index < message_len:
            pixel[1] = int(g[:-1] + binary_message[data_index], 2)
            data_index += 1
        if data_index < message_len:
            pixel[2] = int(b[:-1] + binary_message[data_index], 2)
            data_index += 1
        if data_index >= message_len:
            break
    return image